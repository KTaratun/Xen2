import pymysql
import Gear
import Cards
import Screens
import Elements
import Random
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.config import Config
from kivy.uix.image import Image
from functools import partial
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.textinput import TextInput
from kivy.uix.popup import Popup
import os.path
import csv
from kivy.config import Config
Config.set('input', 'mouse', 'mouse,multitouch_on_demand')

#Config.set('graphics', 'width', '500')
#Config.set('graphics', 'height', '320')

class ScreenManagement(ScreenManager):

    class Character:
        name = ""
        lvl = "12.0"
        health = 8
        bloodType = ""
        bTStats = [0, 0, 0, 0, 0, 0]
        inv = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        #Right = Gear.Gear(0, 0, 0, 0, 0, 0, 0)
        #Left = Gear.Gear(0, 0, 0, 0, 0, 0, 0)

        Instinct = 0
        Tech = 0
        Force = 0
        Vitality = 0
        Psyche = 0
        Mind = 0

        Movement = 0
        Range = 2
        Brutality = 0
        Mastery = 2
        Intellect = 2

        Zephyr = 0
        Spark = 0
        Heat = 0
        Mineral = 0
        Void = 0
        Liquid = 0

        tempHealth = 8
        tempInstinct = 0
        tempTech = 0
        tempForce = 0
        tempVitality = 0
        tempPsyche = 0
        tempMind = 0

        tempMovement = 0
        tempRange = 2
        tempBrutality = 0
        tempMastery = 2
        tempIntellect = 2

        tempZephyr = 0
        tempSpark = 0
        tempHeat = 0
        tempMineral = 0
        tempVoid = 0
        tempLiquid = 0

        cardsLeft = []
        discard = []
        hand = []

        Total = 12
        MasTot = 2
        TempPsy = 0
        ElTotal = 4
        Class = ""
        deck = []

    activeElements = [0, 0, 0, 0, 0, 0]

    conn = pymysql.connect(user="root", passwd="root", host="127.0.0.1", port=8889, database="xen2")
    cur = conn.cursor()

    cPos = .2
    global path
    delete = ""
    colors = []
    booster = []
    boostInd = []
    boosterCards = []

    selected = Button(pos=(0, 1))
    newSelected = Button(pos=(0, 1))
    cardId = 0

    character = Character()
    backStack = []

    def nextscreen(self, last, next):
        # simple function to change screen and remember the previous one fof
        # back button functionality
        # last: The current screen
        # next: The next screen
        self.backStack.append(last)
        self.current = next

    def inc(self, stat, lab, total, screen, character):
        # Used in the character stats screen to add a point to a specific
        # stat from the total stat points available
        # stat: The current stat we are incrementing if we have enough total
        # lab: The label associated to the stat which needs to be updated
        # total: The total amount of stat points to allocate to stats
        # screen: The screen that contains the next button which will become
        # active when all stat points have been allocated
        total -= 1
        if total < 0 or stat + 1 > 4:
            return stat
        else:
            stat += 1
            if total == 0:
                screen.ids.next.disabled = False
            Screens.StatLabelUpdate(screen, stat, lab, character)
            character.Total -= 1
            lab.text = str(stat)
            screen.ids.TotVal.text = str(character.Total)
            return stat

    def dec(self, stat, lab, screen, character):
        # Used in the character stats screen to subtract a point from a
        # specific stat
        # stat: The current stat we are decrementing if it's above 0
        # lab: The label associated to the stat which needs to be updated
        # screen: The screen that contains the next button which will become
        # deactivated if there are still stat points to be allocated
        if stat - 1 >= 0:
            stat -= 1
            character.Total += 1
            print(stat)
            Screens.StatLabelUpdate(screen, stat, lab, character)
            lab.text = str(stat)
            screen.ids.TotVal.text = str(character.Total)
            screen.ids.next.disabled = True
            return stat
        else:
            return 0

    def incEle(self, stat, label, screen, character):
        # Used in the elements screen to add a point to a specific element
        # based on the total element points available
        # stat: The current element we are incrementing if we have enough total
        # mas: The number of unique elements a player can add points to
        # total: The total amount of element points to allocate to elements
        # label: The label associated to the stat which needs to be updated
        # screen: The screen that contains the next button which will become
        # active when all element points have been allocated
        if character.ElTotal - 1 < 0 or character.MasTot == 0 and stat == 0:
            return stat
        if character.ElTotal - 1 == 0 and character.bloodType != "":
            screen.ids.next.disabled = False
        stat += 1
        label.text = str(stat)
        character.ElTotal -= 1
        screen.ids.ElTotVal.text = str(character.ElTotal)
        if stat == 1 and character.MasTot > 0:
            label.color = 1, 1, 1, 1
            character.MasTot -= 1
            screen.ids.MasTot.text = str(character.MasTot)
        return stat

    def decEle(self, stat, label, screen, character):
        # Used in the character elements screen to subtract a point from a
        # specific element
        # stat: The current element we are decrementing if it's above 0
        # label: The label associated to the element which needs to be updated
        # screen: The screen that contains the next button which will become
        # deactivated if there are still element points to be allocated
        copy = stat
        stat -= 1
        if stat < 0:
            return copy
        screen.ids.next.disabled = True
        label.text = str(stat)
        character.ElTotal += 1
        screen.ids.ElTotVal.text = str(character.ElTotal)
        if stat == 0 and copy == 1:
            label.color = 1, 0, 0, 1
            character.MasTot += 1
            screen.ids.MasTot.text = str(character.MasTot)
        return stat

    def colorUpdate(self, screen, curr, character):
        # used in the class and loadout screens to change the color of
        # currently selected item and deselects old selection
        # screen: Determines which screen to alter
        # curr: The current item to highlight
        screen.ids.one.color = 1, 1, 1, 1
        screen.ids.two.color = 1, 1, 1, 1
        screen.ids.three.color = 1, 1, 1, 1
        screen.ids.four.color = 1, 1, 1, 1
        screen.ids.five.color = 1, 1, 1, 1
        screen.ids.six.color = 1, 1, 1, 1
        screen.ids.seven.color = 1, 1, 1, 1
        screen.ids.eight.color = 1, 1, 1, 1
        screen.ids.nine.color = 1, 1, 1, 1
        screen.ids.ten.color = 1, 1, 1, 1
        screen.ids.eleven.color = 1, 1, 1, 1
        screen.ids.twelve.color = 1, 1, 1, 1
        if screen.name == "charSelect":
            character.Class = curr.text
        if screen.name == "class":
            character.Class = curr.name
            screen.ids.cardList.disabled = False
        if curr.text != "Select":
            curr.color = 0, 1, 0, 1
            screen.ids.next.disabled = False

    def deckStuff(self, screen):
        # Sets up initial deck from the class select screen
        # screen: The current screen to update
        fL = screen.ids.fL

        if len(fL.children) > 0:
            for i in range(0, 30):
                fL.remove_widget(fL.children[0])

        fetch = Cards.FetchDeck(self)

        fetch = Cards.Sorting(fetch, self.character.deck)
        print(self.character.deck)

        col = 0
        butCol = 0
        mult = 1
        # Sets up positions for each card
        for j in range(0, 30):

            if j == 10 or j == 20:
                col = 0
                butCol = 0

            if j < 10:
                pos = (18, 355 - col)
                butPoshint = {"x": .057, "y": 12.3 - butCol}
            elif j < 20:
                pos = (18 + 135 * mult, 355 - col)
                butPoshint = {"x": .42, "y": 12.3 - butCol}
            elif j < 30:
                pos = (18 + 135 * mult * 2, 355 - col)
                butPoshint = {"x": .79, "y": 12.3 - butCol}

            col += 30
            butCol += 1

            # Loads card data from the fetch into canvas items
            mlt = .7
            card = Button(name=str(j), pos_hint=butPoshint, size_hint=(.47 * mlt, 8 * mlt), background_color=(0, 0, 0, 0))
            Cards.LoadCard(self, screen, fetch[j], card, pos, mlt)
            fL.add_widget(card)

    def ElementPage(self, screen, character):
        if character.TempPsy == character.Psyche:
            return

        character.TempPsy = character.Psyche
        character.Mastery = character.Psyche + 2
        character.MasTot = character.Mastery
        character.ElTotal = character.Mastery * 2
        print(character.ElTotal)
        print(character.ElTotal)
        screen.ids.ElTotVal.text = str(character.ElTotal)
        screen.ids.MasTot.text = str(character.Mastery)
        screen.ids.ZepVal.text = str(0)
        screen.ids.ZepVal.color = 1, 0, 0, 1
        screen.ids.SpaVal.text = str(0)
        screen.ids.SpaVal.color = 1, 0, 0, 1
        screen.ids.HeaVal.text = str(0)
        screen.ids.HeaVal.color = 1, 0, 0, 1
        screen.ids.MinVal.text = str(0)
        screen.ids.MinVal.color = 1, 0, 0, 1
        screen.ids.VoiVal.text = str(0)
        screen.ids.VoiVal.color = 1, 0, 0, 1
        screen.ids.LiqVal.text = str(0)
        screen.ids.LiqVal.color = 1, 0, 0, 1
        character.Zephyr = 0
        character.Spark = 0
        character.Heat = 0
        character.Mineral = 0
        character.Void = 0
        character.Liquid = 0

    def SaveData(self, character):
        self.path.write(character.name + ',')
        self.path.write(character.lvl + ',')
        self.path.write(str(character.health) + '\n')

        self.path.write(str(character.Movement) + ",")
        self.path.write(str(character.Range) + ',')
        self.path.write(str(character.Brutality) + ',')
        self.path.write(str(character.Vitality) + ',')
        self.path.write(str(character.Mastery) + ',')
        self.path.write(str(character.Intellect) + "\n")

        self.path.write(str(character.Zephyr) + ",")
        self.path.write(str(character.Spark) + ',')
        self.path.write(str(character.Heat) + ',')
        self.path.write(str(character.Mineral) + ',')
        self.path.write(str(character.Void) + ',')
        self.path.write(str(character.Liquid) + "\n")

        self.path.write(str(character.bloodType) + ",")
        for i in range(0, 5):
            self.path.write(str(character.bTStats[i]) + ",")
        self.path.write(str(character.bTStats[5]) + "\n")

        self.path.write(str(character.deck) + "\n")

        invNum = 0
        for i in range(0, 9):
            if character.inv[i] != 0:
                invNum += 1
        self.path.write(str(invNum) + "\n")

        for i in range(0, invNum):
            if character.inv[i] != 0:
                self.path.write(character.inv[i].name + "," + character.inv[i].type + "," + str(character.inv[i].size)
                                + "," + str(character.inv[i].quality) + "," + str(character.inv[i].min) + "," +
                                str(character.inv[i].max) + "," + character.inv[i].definition + "\n")

        self.path.close()

    def LoadData(self, character):
        data = csv.reader(self.path, delimiter=',')
        parse = []

        for row in data:
            parse.append(row)

        character.name = parse[0][0]
        character.lvl = parse[0][1]
        character.health = int(parse[0][2])

        character.Movement = int(parse[1][0])
        character.Range = int(parse[1][1])
        character.Brutality = int(parse[1][2])
        character.Vitality = int(parse[1][3])
        character.Mastery = int(parse[1][4])
        character.Intellect = int(parse[1][5])

        character.Zephyr = int(parse[2][0])
        character.Spark = int(parse[2][1])
        character.Heat = int(parse[2][2])
        character.Mineral = int(parse[2][3])
        character.Void = int(parse[2][4])
        character.Liquid = int(parse[2][5])

        character.tempHealth = character.health
        character.tempMovement = character.Movement
        character.tempRange = character.Range
        character.tempBrutality = character.Brutality
        character.tempVitality = character.Vitality
        character.tempMastery = character.Mastery
        character.tempIntellect = character.Intellect

        character.tempZephyr = character.Zephyr
        character.tempSpark = character.Spark
        character.tempHeat = character.Heat
        character.tempMineral = character.Mineral
        character.tempVoid = character.Void
        character.tempLiquid = character.Liquid

        character.bloodType = parse[3][0]
        for i in range(0, 6):
            character.bTStats[i] = int(parse[3][i + 1])

        temp = parse[4]

        for i in range(0, 30):
            temp[i] = temp[i][1:]

        temp[29] = temp[29][:len(temp[29]) - 1]

        character.deck = temp

        for i in range(0, int(parse[5][0])):
                character.inv[i] = Gear.Gear(parse[i + 6][0], parse[i + 6][1], parse[i + 6][2], parse[i + 6][3],
                                        parse[i + 6][4], parse[i + 6][5], parse[i + 6][6])

        self.path.close()

    def BloodTypeGenerator(self, screen, character):
        Random.RandomBloodType(character)
        screen.ids.bT.text = character.bloodType
        if character.bTStats[0] == 2:
            screen.ids.zepMod.text = "+"
            screen.ids.zepMod.color = 1, 1, 1, 1
        else:
            screen.ids.zepMod.text = "--"
            screen.ids.zepMod.color = 1, 0, 0, 1
        if character.bTStats[1] == 2:
            screen.ids.spaMod.text = "+"
            screen.ids.spaMod.color = 1, 1, 1, 1
        else:
            screen.ids.spaMod.text = "--"
            screen.ids.spaMod.color = 1, 0, 0, 1
        if character.bTStats[2] == 2:
            screen.ids.heaMod.text = "+"
            screen.ids.heaMod.color = 1, 1, 1, 1
        else:
            screen.ids.heaMod.text = "--"
            screen.ids.heaMod.color = 1, 0, 0, 1
        if character.bTStats[3] == 2:
            screen.ids.minMod.text = "+"
            screen.ids.minMod.color = 1, 1, 1, 1
        else:
            screen.ids.minMod.text = "--"
            screen.ids.minMod.color = 1, 0, 0, 1
        if character.bTStats[4] == 2:
            screen.ids.voiMod.text = "+"
            screen.ids.voiMod.color = 1, 1, 1, 1
        else:
            screen.ids.voiMod.text = "--"
            screen.ids.voiMod.color = 1, 0, 0, 1
        if character.bTStats[5] == 2:
            screen.ids.liqMod.text = "+"
            screen.ids.liqMod.color = 1, 1, 1, 1
        else:
            screen.ids.liqMod.text = "--"
            screen.ids.liqMod.color = 1, 0, 0, 1

        if character.ElTotal == 0:
            screen.ids.next.disabled = False

    def CharScreenUpdate(self, screen, character):
        Screens.CharStats(screen)
        screen.ids.nameVal.text = character.name
        screen.ids.lvlVal.text = character.lvl
        sp = character.lvl.split(".")
        if int(sp[1]) > 9:
            screen.ids.lvlVal.color = (0, .25, 1, 1)
        screen.ids.MovVal.text = str(character.Movement)
        screen.ids.Zep.text = str(character.Zephyr)
        screen.ids.TecVal.text = str(character.Range)
        screen.ids.Spa.text = str(character.Spark)
        screen.ids.DamVal.text = str(character.Brutality)
        screen.ids.Hea.text = str(character.Heat)
        screen.ids.HPVal.text = str(character.health)
        screen.ids.Mine.text = str(character.Mineral)
        screen.ids.MasVal.text = str(character.Mastery)
        screen.ids.Voi.text = str(character.Void)
        screen.ids.IntVal.text = str(character.Intellect)
        screen.ids.Liq.text = str(character.Liquid)
        screen.ids.blood.text = str(character.bloodType)
        Screens.BloodStuff(screen, character)

    # maybe move this
    def DeckAndGearInit(self, screen, character):
        #Sets deck equal to the received data of FetchDeck
        self.character.cardsLeft = Cards.FetchDeck(self)
        Gear.CellInit(self, screen, character)

    def ChangeVal(self, orig, temp, button):
        #Temporarily change values of stats while playing.
        #I need to seriously clean this up
        if button.color == [0, 1, 0, 1]:
            return Screens.LvlUpdate(orig, temp, button, self)
        if button.last_touch.button == "left":
            temp = int(temp) + 1
            button.text = str(temp)
        elif button.last_touch.button == "right":
            temp = int(temp) - 1
            button.text = str(temp)
        if temp > int(orig):
            button.color = (0, .25, 1, 1)
        elif temp < int(orig):
            button.color = (1, 0, 0, 1)
        else:
            button.color = (0, 0, 0, 1)
        return temp

    def NamePopup(self, character):
        b = FloatLayout()
        t = TextInput(size_hint=(.9, .38), font_size=30, pos_hint={"center_x": .5, "y": .55})
        b1 = Button(size_hint=(.4, .4), pos_hint={"center_x": .73, "y": .04}, text="Confirm")
        b2 = Button(size_hint=(.4, .4), pos_hint={"center_x": .27, "y": .04}, text="Cancel")
        b.add_widget(t)
        b.add_widget(b1)
        b.add_widget(b2)

        popup = Popup(title='Name',
                      content=b,
                      size_hint=(None, None), size=(410, 200),
                      auto_dismiss=False)

        b1.bind(on_release=popup.dismiss)
        b1.bind(on_release=partial(Screens.NameSave, self.ids.confirm, t, character))
        b2.bind(on_release=popup.dismiss)
        popup.open()

    def LoadoutRandomizer(self, load, character):
        character.inv = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        if load == "sF":
            character.inv[0] = Gear.Weapon(name="Shield", type="Melee", size=2, attack=Gear.AtkRando(8), damage=Gear.DmgRando(6))
            for i in range(0, 4):
                Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Heavy Armor'", i + 1, character)
            for i in range(0, 3):
                Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Light Armor'", i + 5, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'First Aid'", 8, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'First Aid'", 9, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Purifier'", 10, character)
            Gear.CellInit(main=self, screen=self.ids.loadout, character=character)
        elif load == "tN":
            character.inv[0] = Gear.WeaponRandomizer(size=4, type="Melee")
            character.inv[1] = Gear.WeaponRandomizer(size=2, type="Melee")
            for i in range(0, 2):
                Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Heavy Armor'", i + 2, character)
            for i in range(0, 4):
                Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Light Armor'", i + 4, character)
            Gear.CellInit(main=self, screen=self.ids.loadout, character=character)
        elif load == "lL":
            character.inv[0] = Gear.WeaponRandomizer(size=4, type="Ranged")
            character.inv[1] = Gear.WeaponRandomizer(size=2, type="Melee")
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Ammo'", 2, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Ammo'", 3, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Grenade'", 4, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Heavy Armor'", 5, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Light Armor'", 6, character)
            Gear.GetGear(self.cur, "SELECT * FROM gear WHERE gearName = 'Light Armor'", 7, character)
            Gear.RandomItem(self.cur, 8, character)
            Gear.CellInit(main=self, screen=self.ids.loadout, character=character)

    def Info(self, name):
        if name == "INS":
            lab = Label(text="Instinct is used for evasion, perception\nand making quick decisions.\n\nMovement is equal to the number of\nspaces you can move",
                        font_size=20, pos_hint={"x": .5, "y": .2})
            size=(410, 300)
            title = "Instinct - Movement"
        elif name == "TEC":
            lab = Label(text="Your Tech stat reflects how susceptible\nyou are to both Tech buffs and debuffs.\n\nRange is equal to the number of\nspaces you can hit with ranged attacks \neffectively",
                        font_size=20, pos_hint={"x": .5, "y": .15})
            size=(410, 300)
            title = "Tech - Range"
        elif name == "FOR":
            lab = Label(text="Your Force is applied to strength checks\nand equipping weapons.\n\nAdd your Damage bonus to each\nsuccessful attack",
                        font_size=20, pos_hint={"x": .5, "y": .2})
            size=(410, 300)
            title = "Force - Damage"
        elif name == "VIT":
            lab = Label(text="Vitality allows for higher max health and\nresistance to certain status effects.\n\nInventory is equal to the total amount of\n'size' you can carry among all your items.",
                        font_size=20, pos_hint={"x": .5, "y": .2})
            size=(410, 300)
            title = "Vitality - Inventory"
        elif name == "PSY":
            lab = Label(text="Higher psyche allows for more elements\nto be held at once. 4 per point of Psyche.\n\nMastery is the number of elements that\nyou have access to.",
                        font_size=20, pos_hint={"x": .5, "y": .2})
            size=(410, 300)
            title = "Psyche - Mastery"
        elif name == "MIN":
            lab = Label(text="Your Mind bonus is added to all\nnegotiation rolls.\n\nHand is equal to the number of cards that\nyou draw up to on your draw phase.",
                        font_size=20, pos_hint={"x": .5, "y": .2})
            size=(410, 300)
            title = "Mind - Intellect(Hand)"
        elif name == "NEG":
            lab = Label(text="Each turn you may choose to make a\nnegotiation at any point as a free action by\nrolling an item on the list and adding your\nMind stat. "
                             "If you fail, nothing happens and\nyou lose 1 Mind for the rest of the fight.\n\n"
                             "DC: 10 - Unnerve: Target's Critical Range -1\n"
                             "DC: 11 - Provoke: Target has to target you\n"
                             "DC: 12 - Intimidate: Target cannot target you\n"
                             "DC: 13 - Interrogate: Target shows hand\n"
                             "DC: 14 - Break: Target loses 1 Mind\n"
                             "DC: 15 - Trick: Take move action for Target\n"
                             "DC: 16 - Doubt: Target discards a card\n"
                             "DC: 17 - Calm: Skip target's next turn\n"
                             "DC: 18 - Demoralize: Target gets a -2 penalty\n"
                             "DC: 19 - Stress: Target can only use Defense\n"
                             "DC: 20 - Confuse: Target can't pick action\n"
                             "DC: 22 - Enrage: Target attacks closest player\n"
                             "DC: 24 - Manipulate: Take target's next turn\n"
                             "DC: 26 - Paranoia: Target goes rogue\n"
                             "DC: 28 - Threaten: Target flees battle\n"
                             "DC: 30 - Invite: Target joins party",
                        font_size=20, pos_hint={"x": .5, "y": 0})
            size=(460, 600)
            title="Negotiations"
        elif name == "CARDS":
            lab = Label(text="Your class determines your initial deck of cards which can be later modified\n"
                             "through finding booster packs. Each class comes with a deck of 30 cards. 5\n"
                             "Defensive, 5 Tactical, 5 Aggressive, 6 Reaction, 6 Action, 3 Full-Round.\n"
                             "Defensive, Tactical and Aggresive cards are combat cards. When a player\n"
                             "initiates combat with another, both players reveal a combat card from their\n"
                             "hands simultaneously then roll for the attack. Depending on the combat cards\n"
                             "used a player may get additional bonuses added to their roll in the form of\n"
                             "priority.\n\nDefensive combat fends off aggressive, tactical bypasses defensive,\n"
                             "and aggressive overpowers tactical.\n\nReactions can be played any time in which "
                             "it's specific conditions are met.\nActions are played only on the player's turn, "
                             "and Full-Rounds are the same as\nactions, but must be the only thing performed "
                             "during the turn.",
                        font_size=20, pos_hint={"x": .5, "y": .03})
            size=(750, 500)
            title = "Deck"
        elif name == "ELEMENTS":
            lab = Label(text="All of the spells within Xen2 Alpha are made up of different combinations\n"
                        "of 6 base elements. Depending on your Psyche, you will have a higher total\nnumber "
                        "of elements and higher Mastery. Your Mastery is equal to the number\nof different "
                        "elements that you have access to.\n\nYour blood type dictates which elemental bonuses "
                        "and penalties towards\nspecific base elements your character receives.",
                        font_size=20, pos_hint={"x": .5, "y": .05})
            size=(750, 300)
            title = "Elements"

        popup = Popup(title=title,
                      content=lab,
                      size_hint=(None, None), size=size)
        popup.open()

    def ElementList(self, notUsed):
        fL = FloatLayout()
        one1 = Button(name="one+1+" + str(0), text="Zephyr", pos_hint={"x": .05, "y": .91}, size_hint=(.15, .07))
        one1.fbind("on_touch_down", partial(Elements.ElementPopup, self.cur, one1.text))
        fL.add_widget(one1)

        one2 = Button(name="one+2+" + str(0), text="Spark", pos_hint={"x": .2, "y":  .91}, size_hint=(.15, .07))
        one2.fbind("on_touch_down", partial(Elements.ElementPopup, self.cur, one2.text))
        fL.add_widget(one2)

        one3 = Button(name="one+3+" + str(0), text="Heat", pos_hint={"x": .35, "y": .91}, size_hint=(.15, .07))
        one3.fbind("on_touch_down", partial(Elements.ElementPopup, self.cur, one3.text))
        fL.add_widget(one3)

        one4 = Button(name="one+4+" + str(0), text="Mineral", pos_hint={"x": .5, "y":  .91}, size_hint=(.15, .07))
        one4.fbind("on_touch_down", partial(Elements.ElementPopup, self.cur, one4.text))
        fL.add_widget(one4)

        one5 = Button(name="one+5+" + str(0), text="Void", pos_hint={"x": .65, "y": .91}, size_hint=(.15, .07))
        one5.fbind("on_touch_down", partial(Elements.ElementPopup, self.cur, one5.text))
        fL.add_widget(one5)

        one6 = Button(name="one+6+" + str(0), text="Liquid", pos_hint={"x": .8, "y":  .91}, size_hint=(.15, .07))
        one6.fbind("on_touch_down", partial(Elements.ElementPopup, self.cur, one6.text))
        fL.add_widget(one6)

        two1 = Button(name="two+1+" + str(0), text="Null", pos_hint={"x": .125, "y": .76}, size_hint=(.15, .07))
        fL.add_widget(two1)
        two2 = Button(name="two+2+" + str(0), text="Null", pos_hint={"x": .275, "y": .76}, size_hint=(.15, .07))
        fL.add_widget(two2)
        two3 = Button(name="two+3+" + str(0), text="Null", pos_hint={"x": .425, "y": .76}, size_hint=(.15, .07))
        fL.add_widget(two3)
        two4 = Button(name="two+4+" + str(0), text="Null", pos_hint={"x": .575, "y": .76}, size_hint=(.15, .07))
        fL.add_widget(two4)
        two5 = Button(name="two+5+" + str(0), text="Null", pos_hint={"x": .725, "y": .76}, size_hint=(.15, .07))
        fL.add_widget(two5)
        three1 = Button(name="three+1+" + str(0), text="Null", pos_hint={"x": .2, "y": .6}, size_hint=(.15, .07))
        fL.add_widget(three1)
        three2 = Button(name="three+2+" + str(0), text="Null", pos_hint={"x": .35, "y": .6}, size_hint=(.15, .07))
        fL.add_widget(three2)
        three3 = Button(name="three+3+" + str(0), text="Null", pos_hint={"x": .5, "y": .6}, size_hint=(.15, .07))
        fL.add_widget(three3)
        three4 = Button(name="three+4+" + str(0), text="Null", pos_hint={"x": .65, "y": .6}, size_hint=(.15, .07))
        fL.add_widget(three4)
        four1 = Button(name="four+1+" + str(0), text="Null", pos_hint={"x": .273, "y": .45}, size_hint=(.15, .07))
        fL.add_widget(four1)
        four2 = Button(name="four+2+" + str(0), text="Null", pos_hint={"x": .423, "y": .45}, size_hint=(.15, .07))
        fL.add_widget(four2)
        four3 = Button(name="four+3+" + str(0), text="Null", pos_hint={"x": .573, "y": .45}, size_hint=(.15, .07))
        fL.add_widget(four3)
        five1 = Button(name="five+1+" + str(0), text="Null", pos_hint={"x": .35, "y": .3}, size_hint=(.15, .07))
        fL.add_widget(five1)
        five2 = Button(name="five+2+" + str(0), text="Null", pos_hint={"x": .5, "y": .3}, size_hint=(.15, .07))
        fL.add_widget(five2)
        six1 = Button(name="six+1+" + str(0), text="Null", pos_hint={"x": .423, "y": .15}, size_hint=(.15, .07))
        fL.add_widget(six1)

        jump = 110

        fL.add_widget(Image(source="Zephyr.png", pos_hint={"x": .11, "y": .97}, size_hint=(.03, .03)))
        fL.add_widget(Image(source="Spark.png", pos_hint={"x": .26, "y": .97}, size_hint=(.03, .03)))
        fL.add_widget(Image(source="Heat.png", pos_hint={"x": .41, "y": .97}, size_hint=(.03, .03)))
        fL.add_widget(Image(source="Mineral.png", pos_hint={"x": .56, "y": .97}, size_hint=(.03, .03)))
        fL.add_widget(Image(source="Void.png", pos_hint={"x": .71, "y": .97}, size_hint=(.03, .03)))
        fL.add_widget(Image(source="Liquid.png", pos_hint={"x": .86, "y": .97}, size_hint=(.03, .03)))

        twos = [two1, two2, two3, two4, two5]
        threes = [three1, three2, three3, three4]
        fours = [four1, four2, four3]
        fives = [five1, five2]
        sixes = [six1]

        for i in range(0, 5):
            #{"x": .155 + jump*i, "y": .82}
            #{"x": .185 + jump*i, "y": .82}
            twos[i].add_widget(Image(pos=(159 + jump * i, 454), size=(18, 18), color=(0, 0, 0, 0)))
            twos[i].add_widget(Image(pos=(179 + jump * i, 454), size=(18, 18), color=(0, 0, 0, 0)))

        for i in range(0, 4):
            threes[i].add_widget(Image(pos=(204 + jump * i, 368), size=(18, 18), color=(0, 0, 0, 0)))
            threes[i].add_widget(Image(pos=(224 + jump * i, 368), size=(18, 18), color=(0, 0, 0, 0)))
            threes[i].add_widget(Image(pos=(244 + jump * i, 368), size=(18, 18), color=(0, 0, 0, 0)))

        for i in range(0, 3):
            fours[i].add_widget(Image(pos=(249 + jump * i, 287), size=(18, 18), color=(0, 0, 0, 0)))
            fours[i].add_widget(Image(pos=(269 + jump * i, 287), size=(18, 18), color=(0, 0, 0, 0)))
            fours[i].add_widget(Image(pos=(289 + jump * i, 287), size=(18, 18), color=(0, 0, 0, 0)))
            fours[i].add_widget(Image(pos=(309 + jump * i, 287), size=(18, 18), color=(0, 0, 0, 0)))

        for i in range(0, 2):
            fives[i].add_widget(Image(pos=(296 + jump * i, 206), size=(18, 18), color=(0, 0, 0, 0)))
            fives[i].add_widget(Image(pos=(316 + jump * i, 206), size=(18, 18), color=(0, 0, 0, 0)))
            fives[i].add_widget(Image(pos=(336 + jump * i, 206), size=(18, 18), color=(0, 0, 0, 0)))
            fives[i].add_widget(Image(pos=(356 + jump * i, 206), size=(18, 18), color=(0, 0, 0, 0)))
            fives[i].add_widget(Image(pos=(376 + jump * i, 206), size=(18, 18), color=(0, 0, 0, 0)))

        sixes[0].add_widget(Image(pos=(336, 125), size=(18, 18), color=(0, 0, 0, 0)))
        sixes[0].add_widget(Image(pos=(356, 125), size=(18, 18), color=(0, 0, 0, 0)))
        sixes[0].add_widget(Image(pos=(376, 125), size=(18, 18), color=(0, 0, 0, 0)))
        sixes[0].add_widget(Image(pos=(396, 125), size=(18, 18), color=(0, 0, 0, 0)))
        sixes[0].add_widget(Image(pos=(416, 125), size=(18, 18), color=(0, 0, 0, 0)))
        sixes[0].add_widget(Image(pos=(436, 125), size=(18, 18), color=(0, 0, 0, 0)))

        fL.add_widget(Label(text="This is the textsdnsdsadjssdsdss", pos_hint={"x": 0, "y": -.42}))

        oneButtons = [fL.children[len(fL.children)-7], fL.children[len(fL.children)-8], fL.children[len(fL.children)-9],
                      fL.children[len(fL.children)-10], fL.children[len(fL.children)-11]]
        one1.fbind("on_touch_down", partial(Elements.ElementButtons, self, oneButtons, fL))
        one2.fbind("on_touch_down", partial(Elements.ElementButtons, self, oneButtons, fL))
        one3.fbind("on_touch_down", partial(Elements.ElementButtons, self, oneButtons, fL))
        one4.fbind("on_touch_down", partial(Elements.ElementButtons, self, oneButtons, fL))
        one5.fbind("on_touch_down", partial(Elements.ElementButtons, self, oneButtons, fL))
        one6.fbind("on_touch_down", partial(Elements.ElementButtons, self, oneButtons, fL))

        popup = Popup(title="d",
                      content=fL,
                      size_hint=(None, None), size=(760, 600))
        popup.open()

    def ChargePopup(self, character):
        b = FloatLayout()
        zep = Button(size_hint=(.11, .08), pos_hint={"center_x": .12, "y": .88}, background_color=(0, 0, 0, 0))
        spa = Button(size_hint=(.11, .08), pos_hint={"center_x": .27, "y": .88}, background_color=(0, 0, 0, 0))
        hea = Button(size_hint=(.11, .08), pos_hint={"center_x": .42, "y": .88}, background_color=(0, 0, 0, 0))
        min = Button(size_hint=(.11, .08), pos_hint={"center_x": .57, "y": .88}, background_color=(0, 0, 0, 0))
        voi = Button(size_hint=(.11, .08), pos_hint={"center_x": .72, "y": .88}, background_color=(0, 0, 0, 0))
        liq = Button(size_hint=(.11, .08), pos_hint={"center_x": .87, "y": .88}, background_color=(0, 0, 0, 0))
        xJump = 60
        xCorrection = 2
        color = (1, 1, 1, .3)
        zepImage = Image(source="Zephyr.png", pos=(203, 438), color=color)
        spaImage = Image(source="Spark.png", pos=(203 + xJump - xCorrection, 438), color=color)
        heaImage = Image(source="Heat.png", pos=(203 + xJump * 2 - xCorrection * 2, 438), color=color)
        minImage = Image(source="Mineral.png", pos=(203 + xJump * 3 - xCorrection * 3, 438), color=color)
        voiImage = Image(source="Void.png", pos=(203 + xJump * 4 - xCorrection * 4, 438), color=color)
        liqImage = Image(source="Liquid.png", pos=(203 + xJump * 5 - xCorrection * 5, 438), color=color)
        zep.add_widget(zepImage)
        zep.add_widget(spaImage)
        zep.add_widget(heaImage)
        zep.add_widget(minImage)
        zep.add_widget(voiImage)
        zep.add_widget(liqImage)
        b2 = Button(size_hint=(.25, .1), pos_hint={"center_x": .3, "y": .025}, text="Reset")
        b3 = Button(size_hint=(.25, .1), pos_hint={"center_x": .7, "y": .025}, text="Elements")
        b.add_widget(zep)
        b.add_widget(spa)
        b.add_widget(hea)
        b.add_widget(min)
        b.add_widget(voi)
        b.add_widget(liq)
        b.add_widget(b2)
        b.add_widget(b3)

        images = [zepImage, spaImage, heaImage, minImage, voiImage, liqImage]

        for i in range(0, 6):
            if self.activeElements[i] == 1:
                images[i].color = (1, 1, 1, 1)

        popup = Popup(title='Charge',
                      content=b,
                      size_hint=(None, None), size=(410, 550))

        zep.bind(on_release=partial(Elements.ChargeUpdate, self, 0, images, b, character))
        spa.bind(on_release=partial(Elements.ChargeUpdate, self, 1, images, b, character))
        hea.bind(on_release=partial(Elements.ChargeUpdate, self, 2, images, b, character))
        min.bind(on_release=partial(Elements.ChargeUpdate, self, 3, images, b, character))
        voi.bind(on_release=partial(Elements.ChargeUpdate, self, 4, images, b, character))
        liq.bind(on_release=partial(Elements.ChargeUpdate, self, 5, images, b, character))
        b2.bind(on_release=partial(Elements.ResetCharge, images, b, self))
        b3.bind(on_release=self.ElementList)

        Elements.ChargeUpdate(self, -1, images, b, b3, b)
        popup.open()

    def CharInit(self, character):
        self.LoadData(character)
        self.DeckAndGearInit(self.ids.character, character)
        self.CharScreenUpdate(self.ids.character, character)
        return "character"

    def CharSelectUpdate(self):
        if os.path.isfile('char1.txt'):
            path = open("char1.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.one.text = name
            else:
                self.ids.charSelect.ids.one.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.one.text = "NEW CHAR"
        if os.path.isfile('char2.txt'):
            path = open("char2.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.two.text = name
            else:
                self.ids.charSelect.ids.two.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.two.text = "NEW CHAR"
        if os.path.isfile('char3.txt'):
            path = open("char3.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.three.text = name
            else:
                self.ids.charSelect.ids.three.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.three.text = "NEW CHAR"
        if os.path.isfile('char4.txt'):
            path = open("char4.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.four.text = name
            else:
                self.ids.charSelect.ids.four.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.four.text = "NEW CHAR"
        if os.path.isfile('char5.txt'):
            path = open("char5.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.five.text = name
            else:
                self.ids.charSelect.ids.five.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.five.text = "NEW CHAR"
        if os.path.isfile('char6.txt'):
            path = open("char6.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.six.text = name
            else:
                self.ids.charSelect.ids.six.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.six.text = "NEW CHAR"
        if os.path.isfile('char7.txt'):
            path = open("char7.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.seven.text = name
            else:
                self.ids.charSelect.ids.seven.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.seven.text = "NEW CHAR"
        if os.path.isfile('char8.txt'):
            path = open("char8.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.eight.text = name
            else:
                self.ids.charSelect.ids.eight.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.nine.text = "NEW CHAR"
        if os.path.isfile('char9.txt'):
            path = open("char9.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.nine.text = name
            else:
                self.ids.charSelect.ids.nine.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.nine.text = "NEW CHAR"
        if os.path.isfile('char10.txt'):
            path = open("char10.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.ten.text = name
            else:
                self.ids.charSelect.ids.ten.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.ten.text = "NEW CHAR"
        if os.path.isfile('char11.txt'):
            path = open("char11.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.eleven.text = name
            else:
                self.ids.charSelect.ids.eleven.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.eleven.text = "NEW CHAR"
        if os.path.isfile('char12.txt'):
            path = open("char12.txt", "r")
            data = csv.reader(path, delimiter=',')
            parse = []
            for row in data:
                parse.append(row)
            if len(parse) > 0:
                name = parse[0][0]
                self.ids.charSelect.ids.twelve.text = name
            else:
                self.ids.charSelect.ids.twelve.text = "NEW CHAR"
        else:
            self.ids.charSelect.ids.twelve.text = "NEW CHAR"

    def ResetPopup(self, character):
        b = FloatLayout()
        l = Label(font_size=25, pos_hint={"center_x": .5, "y": .25}, text="Reset all cards and temp stats?")
        b1 = Button(size_hint=(.3, .3), pos_hint={"center_x": .83, "y": .13}, text="Reset All")
        b3 = Button(size_hint=(.3, .3), pos_hint={"center_x": .5, "y": .13}, text="Reset Stats")
        b4 = Button(size_hint=(.3, .3), pos_hint={"center_x": .17, "y": .13}, text="Reset Deck")
        b.add_widget(l)
        b.add_widget(b1)
        b.add_widget(b3)
        b.add_widget(b4)

        popup = Popup(title='Reset',
                      content=b,
                      size_hint=(None, None), size=(410, 200))

        b1.bind(on_release=popup.dismiss)
        b1.bind(on_release=partial(Screens.ResetAll, self))
        b3.bind(on_release=popup.dismiss)
        b3.bind(on_release=partial(Screens.ResetStats, self, character))
        b4.bind(on_release=popup.dismiss)
        b4.bind(on_release=partial(Screens.ResetDeck, self, character))
        popup.open()

    def DeletePopup(self):
        b = FloatLayout()
        l = Label(font_size=25, pos_hint={"center_x": .5, "y": .25}, text="Are you sure you want to delete?")
        b1 = Button(size_hint=(.3, .3), pos_hint={"center_x": .5, "y": .13}, text="Delete")
        b.add_widget(l)
        b.add_widget(b1)

        popup = Popup(title='Delete Character',
                      content=b,
                      size_hint=(None, None), size=(410, 200))

        b1.bind(on_press=partial(Screens.DeleteChar, self))
        b1.bind(on_release=popup.dismiss)
        popup.open()

    #move this
    def RandomCharacter(self, lvl, screen, character, notUsed):
        lvl = lvl.text + ".0"
        self.nextscreen("title", "character")
        character.inv = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        Random.RandomCharacter(lvl, character, self.cur)
        character.cardsLeft = Cards.FetchDeck(self)
        Screens.ResetAll(self, self)
        self.CharScreenUpdate(screen, character)

    def LevelUpPopup(self):
        b = FloatLayout()
        sp = self.character.lvl.split(".")

        popup = Popup(title='Level Up',
                      content=b,
                      size_hint=(None, None), size=(410, 200))

        if int(sp[1]) > 99:
            text = "Level up?"
            b1 = Button(size_hint=(.3, .3), pos_hint={"center_x": .5, "y": .13}, text="LVL")
            b.add_widget(b1)
            b1.bind(on_release=popup.dismiss)
            b1.bind(on_press=partial(Screens.LevelUp, self.character, self.ids.character, self))
        else:
            text = "Don't have enough EXP."

        l = Label(font_size=25, pos_hint={"center_x": .5, "y": .25}, text=text)
        b.add_widget(l)

        popup.open()

    def Swap(self):
        # Disgusting code
        cards = []
        for i in range(len(self.booster), 30 + len(self.booster)):
            cards.append(self.ids.booster.ids.fL.children[i])

        cards.reverse()

        selInd = cards.index(self.selected)
        newInd = self.boosterCards.index(self.newSelected)
        self.character.deck[selInd], self.boostInd[newInd] = self.boostInd[newInd], self.character.deck[selInd]
        #Cards.Sorting(self.)

        query = "SELECT * FROM cards WHERE cardId = %s"
        self.cur.execute(query, (cards[selInd].name))
        self.booster[newInd] = (self.cur.fetchone())

        Screens.ResetDeck(self, self.character, 0)
        self.deckStuff(self.ids.booster)
        Cards.NewCardPlacement(self)

    def RandoEnemyPopup(self):
        b = FloatLayout()
        t = TextInput(size_hint=(.18, .38), font_size=30, pos_hint={"center_x": .7, "y": .55})
        b1 = Button(size_hint=(.4, .4), pos_hint={"center_x": .73, "y": .04}, text="Confirm")
        b2 = Button(size_hint=(.4, .4), pos_hint={"center_x": .27, "y": .04}, text="Cancel")
        l = Label(font_size=28, pos_hint={"center_x": .36, "y": .23}, text="What level?")
        b.add_widget(l)
        b.add_widget(t)
        b.add_widget(b1)
        b.add_widget(b2)

        popup = Popup(title='Random Enemy',
                      content=b,
                      size_hint=(None, None), size=(410, 200),
                      auto_dismiss=False)

        b1.bind(on_release=popup.dismiss)
        b1.bind(on_release=partial(self.RandomCharacter, t, self.ids.character, self.character))
        b2.bind(on_release=popup.dismiss)
        popup.open()

    def DrawCardPopup(self):
        b = FloatLayout()
        l = Label(font_size=25, pos_hint={"center_x": .5, "y": .25}, text="Draw Card?")
        b1 = Button(size_hint=(.3, .3), pos_hint={"center_x": .8, "y": .13}, text="Draw")
        b2 = Button(size_hint=(.3, .3), pos_hint={"center_x": .5, "y": .13}, text="Max")
        b3 = Button(size_hint=(.3, .3), pos_hint={"center_x": .2, "y": .13}, text="Search")
        b.add_widget(l)
        b.add_widget(b1)
        b.add_widget(b2)
        b.add_widget(b3)

        popup = Popup(title='Deck',
                      content=b,
                      size_hint=(None, None), size=(410, 200))

        b1.bind(on_press=partial(Cards.DrawCard, self, self.character))
        b1.bind(on_release=popup.dismiss)
        b2.bind(on_press=partial(Cards.DrawMax, self, self.character))
        b2.bind(on_release=popup.dismiss)
        b3.bind(on_press=partial(Cards.SearchPopup, self, self.character))
        b3.bind(on_release=popup.dismiss)
        popup.open()

    def DiscardPopup(self):
        b = FloatLayout()
        l = Label(font_size=25, pos_hint={"center_x": .5, "y": .25}, text="Discard?")
        b1 = Button(size_hint=(.3, .3), pos_hint={"center_x": .8, "y": .13}, text="Discard")
        b2 = Button(size_hint=(.3, .3), pos_hint={"center_x": .2, "y": .13}, text="Undo")
        b3 = Button(size_hint=(.3, .3), pos_hint={"center_x": .5, "y": .13}, text="Stamina")
        b.add_widget(l)
        b.add_widget(b1)
        b.add_widget(b2)
        b.add_widget(b3)

        if len(self.character.discard) < 1:
            b2.disabled = True
            b3.disabled = True
        if self.selected.pos == [0, 1]:
            b1.disabled = True

        popup = Popup(title='Draw Card',
                      content=b,
                      size_hint=(None, None), size=(410, 200))

        b1.bind(on_press=partial(Cards.Discard, self, self.character))
        b1.bind(on_release=popup.dismiss)
        b2.bind(on_press=partial(Cards.Undo, self, self.character))
        b2.bind(on_release=popup.dismiss)
        b3.bind(on_press=partial(Cards.GainStamina, self, self.character))
        b3.bind(on_release=popup.dismiss)
        popup.open()

    def HideButton(self, button):
        for i in range(0, len(self.character.hand)):
            if self.character.hand[i].color == [1, 1, 1, 1]:
                self.character.hand[i].color = (1, 1, 1, 0)
                button.color = (1, 1, 0, 1)
                for j in range(0, len(self.character.hand[i].children)):
                    self.character.hand[i].children[j].color = (1, 1, 1, 0)
            else:
                self.character.hand[i].color = (1, 1, 1, 1)
                button.color = (1, 1, 1, 1)
                for j in range(0, len(self.character.hand[i].children)):
                    self.character.hand[i].children[j].color = (1, 1, 1, 1)

    def RandDeck(self):
        self.character.deck = Random.RandomDeck(self.cur)

    class TitleScreen(Screen):
        pass

    class CharacterSelectScreen(Screen):
        pass

    class ClassSelectScreen(Screen):
        pass

    class CardInfoScreen(Screen):
        pass

    class CharacterStatsScreen(Screen):
        pass

    class ElementSelectScreen(Screen):
        pass

    class LoadoutScreen(Screen):
        pass

    class ConfirmationScreen(Screen):
        pass

    class CharacterScreen(Screen):
        pass

    class BoosterScreen(Screen):
        pass

presentation = Builder.load_file("main.kv")

class MainApp(App):
    def build(self):
        return presentation

if __name__ == "__main__":
    MainApp().run()